#!/usr/bin/escript
%%! +W w -pz ebin -env ERL_LIBS deps
%% TODO: drop above line
%%
%% -args_file /etc/haircut/beam.args

%%----------------------------------------------------------------------------

-record(opts, {
  command = start,
  config_file,
  pid_file,
  control_socket,
  erl_node,
  erl_cookie,
  shell = false,
  server,
  nick,
  user,
  full_name,
  channels
}).

%%----------------------------------------------------------------------------

main(["-h"]) -> main(["--help"]);
main(["-?"]) -> main(["--help"]);

main(["--help"]) ->
  io:fwrite("Usage: ~s [options]~n", [escript:script_name()]),
  io:fwrite("~nRecognized options:~n"),
  io:fwrite("  --cookie-file=PATH~n"),
  io:fwrite("  --config=PATH~n"),
  io:fwrite("  --pid-file=PATH~n"),
  io:fwrite("  --control-socket=PATH~n"),
  io:fwrite("  --debug-shell~n"),
  ok;

main([]) ->
  io:fwrite("Calling ~s with no configuration is not supported yet.~n",
            [escript:script_name()]),
  main(["--help"]),
  halt(1);

main(Args) ->
  {ok, {Opts, Command}} = cmdline(Args, #opts{}),
  case Command of
    start ->
      % there won't be any use for sections
      {ok, Configuration} = read_config(Opts),
      start(Configuration);
    _Any ->
      % except that this doesn't work in escript
      Command(Opts) % stop, reload_commander, reload_bot, wait_for_start
  end.

%%----------------------------------------------------------------------------

start(Opts) ->
  %indira:chdir(),
  indira:write_pidfile(Opts#opts.pid_file),
  setup_indira(Opts),
  setup_haircut(Opts),
  setup_erlang_networking(Opts),
  indira:start_rec(haircut), % before indira to prevent race condition
  indira:start_rec(indira),
  case Opts of
    #opts{shell = true} -> shell:start();
    _ -> ok
  end,
  indira:sleep_forever(),
  ok.

%%----------------------------------------------------------
%% setup Indira app environment {{{

setup_indira(Opts) ->
  % TODO: more control sockets?
  indira:add_listener(indira_unix, Opts#opts.control_socket),
  indira:set_commander(haircut_commander),
  indira:setup_logging(haircut, [{stdout, color}]),
  ok.

%% }}}
%%----------------------------------------------------------
%% setup haircut app environment {{{

setup_haircut(Opts) ->
  case string:tokens(Opts#opts.server, ":") of
    [Server, PortStr] -> Port = list_to_integer(PortStr);
    [Server] -> Port = 6667
  end,
  indira:set_option(haircut, server, Server),
  indira:set_option(haircut, port, Port),
  indira:set_option(haircut, channels, Opts#opts.channels),
  case Opts of
    #opts{nick = undefined} -> ok;
    #opts{nick = Nick} -> indira:set_option(haircut, nick, Nick)
  end,
  case Opts of
    #opts{user = undefined, full_name = undefined} -> ok;
    #opts{user = User,      full_name = undefined} ->
      indira:set_option(haircut, user, {User, "haircut IRC bot"});
    #opts{user = undefined, full_name = FullName} ->
      indira:set_option(haircut, user, {env, FullName});
    #opts{user = User,      full_name = FullName} ->
      indira:set_option(haircut, user, {User, FullName})
  end,
  ok.

%% }}}
%%----------------------------------------------------------
%% setup distributed Erlang (if applicable) {{{

setup_erlang_networking(Opts) ->
  case Opts of
    #opts{erl_cookie = undefined, erl_node = undefined} ->
      skip;
    #opts{erl_cookie = Cookie, erl_node = undefined} ->
      indira:distributed(haircut, shortnames, Cookie);
    #opts{erl_cookie = undefined, erl_node = Node} ->
      indira:distributed(Node, shortnames);
    #opts{erl_cookie = Cookie, erl_node = Node} ->
      indira:distributed(Node, shortnames, Cookie)
  end,
  ok.

%% }}}
%%----------------------------------------------------------

%%----------------------------------------------------------------------------
%% read configuration file {{{

read_config(Opts = #opts{config_file = ConfigFile}) ->
  % we won't use sections from config
  {ok, {Config, _Sections}} = case ConfigFile of
    undefined -> {ok, {[], []}};
    _ -> eni:file(ConfigFile)
  end,
  User = proplists:get_value(user, Config, os:getenv("USER")),
  CombinedOpts = Opts#opts{
    user      = User,
    nick      = proplists:get_value(nick, Config, User),
    full_name = proplists:get_value(full_name, Config, "haircut IRC bot"),
    server    = proplists:get_value(server, Config),
    channels  = proplists:get_all_values(channel, Config)
  },
  case CombinedOpts of
    #opts{user = false}       -> {error, no_user};
    #opts{server = undefined} -> {error, no_server};
    #opts{channels = []}      -> {error, no_channels};
    _ -> {ok, CombinedOpts}
  end.

%% }}}
%%----------------------------------------------------------------------------
%% command line processing {{{

cmdline([], Opts) ->
  {ok, {Opts, Opts#opts.command}};

cmdline(["--cookie-file=" ++ Path | Rest], Opts) ->
  cmdline(["--cookie-file", Path | Rest], Opts);
cmdline(["--cookie-file", Path | Rest], Opts) ->
  case file:read_file(Path) of
    {ok, <<>>} ->
      cmdline(Rest, Opts);
    {ok, CookieContent} ->
      [Cookie | _] = binary:split(CookieContent, <<"\n">>),
      NewOpts = Opts#opts{erl_cookie = Cookie},
      cmdline(Rest, NewOpts);
    {error, enoent} ->
      cmdline(Rest, Opts);
    {error, Reason} ->
      {error, Reason}
  end;

cmdline(["--config=" ++ Path | Rest], Opts) ->
  cmdline(["--config", Path | Rest], Opts);
cmdline(["--config", Path | Rest], Opts) ->
  NewOpts = Opts#opts{config_file = Path},
  cmdline(Rest, NewOpts);

cmdline(["--pid-file=" ++ Path | Rest], Opts) ->
  cmdline(["--pid-file", Path | Rest], Opts);
cmdline(["--pid-file", Path | Rest], Opts) ->
  NewOpts = Opts#opts{pid_file = Path},
  cmdline(Rest, NewOpts);

cmdline(["--control-socket=" ++ Path | Rest], Opts) ->
  cmdline(["--control-socket", Path | Rest], Opts);
cmdline(["--control-socket", Path | Rest], Opts) ->
  NewOpts = Opts#opts{control_socket = Path},
  cmdline(Rest, NewOpts);

cmdline(["--debug-shell" | Rest], Opts) ->
  NewOpts = Opts#opts{shell = true},
  cmdline(Rest, NewOpts);

cmdline([Opt | _Rest], _Opts) ->
  {error, {bad_option, Opt}}.

% }}}
%%----------------------------------------------------------------------------
%% vim:ft=erlang:foldmethod=marker
